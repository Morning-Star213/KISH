import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  File: { input: any; output: any; }
};

export type Brand = {
  __typename?: 'Brand';
  id: Scalars['ID']['output'];
  image?: Maybe<Scalars['String']['output']>;
  imageUrl?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type Category = {
  __typename?: 'Category';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type Color = {
  __typename?: 'Color';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type Condition = {
  __typename?: 'Condition';
  comment?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name?: Maybe<Scalars['String']['output']>;
  resaleRate?: Maybe<Scalars['Int']['output']>;
  tradeInRate?: Maybe<Scalars['Int']['output']>;
  uuid: Scalars['ID']['output'];
};

export type ConditionAttributes = {
  name?: InputMaybe<Scalars['String']['input']>;
  resaleRate?: InputMaybe<Scalars['Int']['input']>;
  tradeInRate?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of CreateCondition */
export type CreateConditionInput = {
  attributes: ConditionAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateCondition. */
export type CreateConditionPayload = {
  __typename?: 'CreateConditionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  condition?: Maybe<Condition>;
  error?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateListingImage */
export type CreateListingImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  file?: InputMaybe<Scalars['File']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateListingImage. */
export type CreateListingImagePayload = {
  __typename?: 'CreateListingImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  listing?: Maybe<Listing>;
};

/** Autogenerated input type of CreateListing */
export type CreateListingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateListing. */
export type CreateListingPayload = {
  __typename?: 'CreateListingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  listing?: Maybe<Listing>;
};

/** Autogenerated input type of CreateProductImage */
export type CreateProductImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  file?: InputMaybe<Scalars['File']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProductImage. */
export type CreateProductImagePayload = {
  __typename?: 'CreateProductImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  product?: Maybe<Product>;
};

/** Autogenerated input type of CreateProduct */
export type CreateProductInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  product: ProductAttributes;
  productMaster: ProductMasterAttributes;
};

/** Autogenerated return type of CreateProduct. */
export type CreateProductPayload = {
  __typename?: 'CreateProductPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  product?: Maybe<Product>;
};

export type Image = {
  __typename?: 'Image';
  id: Scalars['ID']['output'];
  image: Scalars['String']['output'];
  imageUrl: Scalars['String']['output'];
  resourceId?: Maybe<Scalars['ID']['output']>;
  resourceType?: Maybe<Scalars['String']['output']>;
};

export type Item = {
  __typename?: 'Item';
  id: Scalars['ID']['output'];
  listing: Listing;
  listingId: Scalars['ID']['output'];
  orderId: Scalars['ID']['output'];
  price?: Maybe<Scalars['Int']['output']>;
  uuid: Scalars['ID']['output'];
};

export type Listing = {
  __typename?: 'Listing';
  brandId: Scalars['ID']['output'];
  comment?: Maybe<Scalars['String']['output']>;
  conditionId?: Maybe<Scalars['ID']['output']>;
  id: Scalars['ID']['output'];
  images?: Maybe<Array<Image>>;
  organizationId: Scalars['ID']['output'];
  price?: Maybe<Scalars['Int']['output']>;
  product: Product;
  productId: Scalars['ID']['output'];
  repairMethod?: Maybe<Scalars['String']['output']>;
  repairMethodI18n?: Maybe<Scalars['String']['output']>;
  sellerId: Scalars['ID']['output'];
  size?: Maybe<Size>;
  sizeId?: Maybe<Scalars['ID']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  statusI18n?: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type ListingAttributes = {
  comment?: InputMaybe<Scalars['String']['input']>;
  conditionId?: InputMaybe<Scalars['ID']['input']>;
  price?: InputMaybe<Scalars['Int']['input']>;
  repairMethod?: InputMaybe<Scalars['String']['input']>;
  sellerId?: InputMaybe<Scalars['ID']['input']>;
  sizeId?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type ListingSearch = {
  keyword?: InputMaybe<Scalars['String']['input']>;
};

export type Listings = {
  __typename?: 'Listings';
  listings: Array<Listing>;
  pagination: Pagination;
};

export type Mutation = {
  __typename?: 'Mutation';
  createCondition: CreateConditionPayload;
  createListing: CreateListingPayload;
  createListingImage: CreateListingImagePayload;
  createProduct: CreateProductPayload;
  createProductImage: CreateProductImagePayload;
  signin: SigninPayload;
  signout: SignoutPayload;
  /** An example field added by the generator */
  testField: Scalars['String']['output'];
  updateCondition: UpdateConditionPayload;
  updateListing: UpdateListingPayload;
  updateListingImage: UpdateListingImagePayload;
  updateProduct: UpdateProductPayload;
  updateProductImage: UpdateProductImagePayload;
  updateProductMaster: UpdateProductMasterPayload;
};


export type MutationCreateConditionArgs = {
  input: CreateConditionInput;
};


export type MutationCreateListingArgs = {
  input: CreateListingInput;
};


export type MutationCreateListingImageArgs = {
  input: CreateListingImageInput;
};


export type MutationCreateProductArgs = {
  input: CreateProductInput;
};


export type MutationCreateProductImageArgs = {
  input: CreateProductImageInput;
};


export type MutationSigninArgs = {
  input: SigninInput;
};


export type MutationSignoutArgs = {
  input: SignoutInput;
};


export type MutationUpdateConditionArgs = {
  input: UpdateConditionInput;
};


export type MutationUpdateListingArgs = {
  input: UpdateListingInput;
};


export type MutationUpdateListingImageArgs = {
  input: UpdateListingImageInput;
};


export type MutationUpdateProductArgs = {
  input: UpdateProductInput;
};


export type MutationUpdateProductImageArgs = {
  input: UpdateProductImageInput;
};


export type MutationUpdateProductMasterArgs = {
  input: UpdateProductMasterInput;
};

export type Order = {
  __typename?: 'Order';
  brandId: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  items?: Maybe<Array<Item>>;
  orderDate?: Maybe<Scalars['DateTime']['output']>;
  orderNumber?: Maybe<Scalars['Int']['output']>;
  paymentStatus?: Maybe<Scalars['String']['output']>;
  paymentStatusI18n?: Maybe<Scalars['String']['output']>;
  shippingStatus?: Maybe<Scalars['String']['output']>;
  shippingStatusI18n?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  statusI18n?: Maybe<Scalars['String']['output']>;
  strageLocation?: Maybe<Scalars['String']['output']>;
  totalPrice?: Maybe<Scalars['Int']['output']>;
  trackingCode?: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type OrderSearch = {
  keyword?: InputMaybe<Scalars['String']['input']>;
};

export type Orders = {
  __typename?: 'Orders';
  orders: Array<Order>;
  pagination: Pagination;
};

export type Organization = {
  __typename?: 'Organization';
  brands: Array<Brand>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  sellers: Array<Seller>;
};

export type Pagination = {
  __typename?: 'Pagination';
  currentCount: Scalars['Int']['output'];
  currentPage: Scalars['Int']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  hasPreviousPage: Scalars['Boolean']['output'];
  nextPage?: Maybe<Scalars['Int']['output']>;
  previousPage?: Maybe<Scalars['Int']['output']>;
  resultsCount: Scalars['Int']['output'];
  totalCount: Scalars['Int']['output'];
  totalPages: Scalars['Int']['output'];
};

export type Product = {
  __typename?: 'Product';
  color?: Maybe<Color>;
  colorId?: Maybe<Scalars['ID']['output']>;
  id: Scalars['ID']['output'];
  images?: Maybe<Array<Image>>;
  isArchive: Scalars['Boolean']['output'];
  isResale: Scalars['Boolean']['output'];
  productMaster: ProductMaster;
  productMasterId?: Maybe<Scalars['ID']['output']>;
  sizes?: Maybe<Array<Size>>;
  status: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type ProductAttributes = {
  brandId?: InputMaybe<Scalars['ID']['input']>;
  colorId?: InputMaybe<Scalars['ID']['input']>;
  isArchive?: InputMaybe<Scalars['Boolean']['input']>;
  isResale?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
};

export type ProductMaster = {
  __typename?: 'ProductMaster';
  brandId: Scalars['ID']['output'];
  care?: Maybe<Scalars['String']['output']>;
  categories?: Maybe<Array<Category>>;
  code?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  price?: Maybe<Scalars['Int']['output']>;
  priceTotal?: Maybe<Scalars['Int']['output']>;
  sex?: Maybe<Scalars['String']['output']>;
  sexI18n?: Maybe<Scalars['String']['output']>;
  sizes?: Maybe<Array<Size>>;
  uuid: Scalars['ID']['output'];
  year?: Maybe<Scalars['String']['output']>;
};

export type ProductMasterAttributes = {
  brandId?: InputMaybe<Scalars['ID']['input']>;
  care?: InputMaybe<Scalars['String']['input']>;
  categoryIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['Int']['input']>;
  priceTotal?: InputMaybe<Scalars['Int']['input']>;
  sex?: InputMaybe<Scalars['String']['input']>;
  sizeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  year?: InputMaybe<Scalars['String']['input']>;
};

export type ProductSearch = {
  isArchive?: InputMaybe<Scalars['String']['input']>;
  isResale?: InputMaybe<Scalars['String']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
};

export type Products = {
  __typename?: 'Products';
  pagination: Pagination;
  products: Array<Product>;
};

export type Query = {
  __typename?: 'Query';
  categories: Array<Category>;
  colors: Array<Color>;
  condition: Condition;
  conditions: Array<Condition>;
  currentUser?: Maybe<User>;
  listing: Listing;
  listings: Listings;
  order: Order;
  orders: Orders;
  product: Product;
  productMaster: ProductMaster;
  products: Products;
  sizes: Array<Size>;
  /** An example field added by the generator */
  testField: Scalars['String']['output'];
  user?: Maybe<User>;
};


export type QueryCategoriesArgs = {
  brandId: Scalars['ID']['input'];
};


export type QueryColorsArgs = {
  brandId: Scalars['ID']['input'];
};


export type QueryConditionArgs = {
  uuid: Scalars['ID']['input'];
};


export type QueryConditionsArgs = {
  brandId: Scalars['ID']['input'];
};


export type QueryListingArgs = {
  uuid: Scalars['ID']['input'];
};


export type QueryListingsArgs = {
  brandId: Scalars['ID']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<ListingSearch>;
};


export type QueryOrderArgs = {
  uuid: Scalars['ID']['input'];
};


export type QueryOrdersArgs = {
  brandId: Scalars['ID']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<OrderSearch>;
};


export type QueryProductArgs = {
  uuid: Scalars['ID']['input'];
};


export type QueryProductMasterArgs = {
  brandId: Scalars['ID']['input'];
  code: Scalars['String']['input'];
};


export type QueryProductsArgs = {
  brandId: Scalars['ID']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<ProductSearch>;
};


export type QuerySizesArgs = {
  brandId: Scalars['ID']['input'];
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};

export type Seller = {
  __typename?: 'Seller';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

/** Autogenerated input type of Signin */
export type SigninInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

/** Autogenerated return type of Signin. */
export type SigninPayload = {
  __typename?: 'SigninPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

/** Autogenerated input type of Signout */
export type SignoutInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of Signout. */
export type SignoutPayload = {
  __typename?: 'SignoutPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  result?: Maybe<Scalars['String']['output']>;
};

export type Size = {
  __typename?: 'Size';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** Autogenerated input type of UpdateCondition */
export type UpdateConditionInput = {
  attributes: ConditionAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateCondition. */
export type UpdateConditionPayload = {
  __typename?: 'UpdateConditionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  condition?: Maybe<Condition>;
  error?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateListingImage */
export type UpdateListingImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  file?: InputMaybe<Scalars['File']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateListingImage. */
export type UpdateListingImagePayload = {
  __typename?: 'UpdateListingImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  listing?: Maybe<Listing>;
};

/** Autogenerated input type of UpdateListing */
export type UpdateListingInput = {
  attributes: ListingAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateListing. */
export type UpdateListingPayload = {
  __typename?: 'UpdateListingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  listing?: Maybe<Listing>;
};

/** Autogenerated input type of UpdateProductImage */
export type UpdateProductImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  file?: InputMaybe<Scalars['File']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateProductImage. */
export type UpdateProductImagePayload = {
  __typename?: 'UpdateProductImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  product?: Maybe<Product>;
};

/** Autogenerated input type of UpdateProduct */
export type UpdateProductInput = {
  attributes: ProductAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated input type of UpdateProductMaster */
export type UpdateProductMasterInput = {
  attributes: ProductMasterAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateProductMaster. */
export type UpdateProductMasterPayload = {
  __typename?: 'UpdateProductMasterPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  productMaster: ProductMaster;
};

/** Autogenerated return type of UpdateProduct. */
export type UpdateProductPayload = {
  __typename?: 'UpdateProductPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  product?: Maybe<Product>;
};

export type User = {
  __typename?: 'User';
  confirmationToken?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  firstName?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  organization?: Maybe<Organization>;
  organizationId?: Maybe<Scalars['ID']['output']>;
  role: Scalars['String']['output'];
  roleI18n?: Maybe<Scalars['String']['output']>;
};

export type BrandFragmentFragment = { __typename?: 'Brand', id: string, name: string };

export type CategoryFragmentFragment = { __typename?: 'Category', id: string, name: string };

export type ColorFragmentFragment = { __typename?: 'Color', id: string, name: string };

export type ConditionFragmentFragment = { __typename?: 'Condition', id: string, uuid: string, name?: string | null, tradeInRate?: number | null, resaleRate?: number | null };

export type ImageFragmentFragment = { __typename?: 'Image', id: string, resourceId?: string | null, resourceType?: string | null, image: string, imageUrl: string };

export type ItemFragmentFragment = { __typename?: 'Item', id: string, uuid: string, orderId: string, listingId: string, price?: number | null };

export type ListingFragmentFragment = { __typename?: 'Listing', id: string, uuid: string, organizationId: string, brandId: string, sellerId: string, productId: string, conditionId?: string | null, sizeId?: string | null, status?: string | null, statusI18n?: string | null, repairMethod?: string | null, repairMethodI18n?: string | null, comment?: string | null, price?: number | null };

export type OrderFragmentFragment = { __typename?: 'Order', id: string, uuid: string, brandId: string, orderNumber?: number | null, orderDate?: any | null, totalPrice?: number | null, status?: string | null, statusI18n?: string | null, paymentStatus?: string | null, paymentStatusI18n?: string | null, shippingStatus?: string | null, shippingStatusI18n?: string | null };

export type OrganizationFragmentFragment = { __typename?: 'Organization', id: string, name: string };

export type PaginationFragmentFragment = { __typename?: 'Pagination', resultsCount: number, totalCount: number, totalPages: number, currentPage: number, currentCount: number, nextPage?: number | null, previousPage?: number | null, hasNextPage: boolean, hasPreviousPage: boolean };

export type ProductFragmentFragment = { __typename?: 'Product', id: string, uuid: string, status: string, isResale: boolean, isArchive: boolean, colorId?: string | null };

export type ProductMasterFragmentFragment = { __typename?: 'ProductMaster', id: string, uuid: string, brandId: string, name: string, code?: string | null, description?: string | null, price?: number | null, priceTotal?: number | null, care?: string | null, sex?: string | null, sexI18n?: string | null, year?: string | null };

export type SellerFragmentFragment = { __typename?: 'Seller', id: string, name: string };

export type SizeFragmentFragment = { __typename?: 'Size', id: string, name: string };

export type UserFragmentFragment = { __typename?: 'User', id: string, email: string, role: string, firstName?: string | null, lastName?: string | null, confirmationToken?: string | null, fullName?: string | null, organizationId?: string | null };

export type ListingQueryVariables = Exact<{
  brandId: Scalars['ID']['input'];
  uuid: Scalars['ID']['input'];
}>;


export type ListingQuery = { __typename?: 'Query', listing: { __typename?: 'Listing', id: string, uuid: string, organizationId: string, brandId: string, sellerId: string, productId: string, conditionId?: string | null, sizeId?: string | null, status?: string | null, statusI18n?: string | null, repairMethod?: string | null, repairMethodI18n?: string | null, comment?: string | null, price?: number | null, product: { __typename?: 'Product', id: string, uuid: string, status: string, isResale: boolean, isArchive: boolean, colorId?: string | null, productMaster: { __typename?: 'ProductMaster', id: string, uuid: string, brandId: string, name: string, code?: string | null, description?: string | null, price?: number | null, priceTotal?: number | null, care?: string | null, sex?: string | null, sexI18n?: string | null, year?: string | null, sizes?: Array<{ __typename?: 'Size', id: string, name: string }> | null, categories?: Array<{ __typename?: 'Category', id: string, name: string }> | null }, color?: { __typename?: 'Color', id: string, name: string } | null, images?: Array<{ __typename?: 'Image', id: string, resourceId?: string | null, resourceType?: string | null, image: string, imageUrl: string }> | null }, size?: { __typename?: 'Size', id: string, name: string } | null, images?: Array<{ __typename?: 'Image', id: string, resourceId?: string | null, resourceType?: string | null, image: string, imageUrl: string }> | null }, conditions: Array<{ __typename?: 'Condition', id: string, uuid: string, name?: string | null, tradeInRate?: number | null, resaleRate?: number | null }> };

export type ListingsQueryVariables = Exact<{
  brandId: Scalars['ID']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  search?: InputMaybe<ListingSearch>;
}>;


export type ListingsQuery = { __typename?: 'Query', listings: { __typename?: 'Listings', listings: Array<{ __typename?: 'Listing', id: string, uuid: string, organizationId: string, brandId: string, sellerId: string, productId: string, conditionId?: string | null, sizeId?: string | null, status?: string | null, statusI18n?: string | null, repairMethod?: string | null, repairMethodI18n?: string | null, comment?: string | null, price?: number | null, product: { __typename?: 'Product', id: string, uuid: string, status: string, isResale: boolean, isArchive: boolean, colorId?: string | null, productMaster: { __typename?: 'ProductMaster', id: string, uuid: string, brandId: string, name: string, code?: string | null, description?: string | null, price?: number | null, priceTotal?: number | null, care?: string | null, sex?: string | null, sexI18n?: string | null, year?: string | null, sizes?: Array<{ __typename?: 'Size', id: string, name: string }> | null }, images?: Array<{ __typename?: 'Image', id: string, resourceId?: string | null, resourceType?: string | null, image: string, imageUrl: string }> | null, color?: { __typename?: 'Color', id: string, name: string } | null, sizes?: Array<{ __typename?: 'Size', id: string, name: string }> | null } }>, pagination: { __typename?: 'Pagination', resultsCount: number, totalCount: number, totalPages: number, currentPage: number, currentCount: number, nextPage?: number | null, previousPage?: number | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export const BrandFragmentFragmentDoc = gql`
    fragment brandFragment on Brand {
  id
  name
}
    `;
export const CategoryFragmentFragmentDoc = gql`
    fragment categoryFragment on Category {
  id
  name
}
    `;
export const ColorFragmentFragmentDoc = gql`
    fragment colorFragment on Color {
  id
  name
}
    `;
export const ConditionFragmentFragmentDoc = gql`
    fragment conditionFragment on Condition {
  id
  uuid
  name
  tradeInRate
  resaleRate
}
    `;
export const ImageFragmentFragmentDoc = gql`
    fragment imageFragment on Image {
  id
  resourceId
  resourceType
  image
  imageUrl
}
    `;
export const ItemFragmentFragmentDoc = gql`
    fragment itemFragment on Item {
  id
  uuid
  orderId
  listingId
  price
}
    `;
export const ListingFragmentFragmentDoc = gql`
    fragment listingFragment on Listing {
  id
  uuid
  organizationId
  brandId
  sellerId
  productId
  conditionId
  sizeId
  status
  statusI18n
  repairMethod
  repairMethodI18n
  comment
  price
}
    `;
export const OrderFragmentFragmentDoc = gql`
    fragment orderFragment on Order {
  id
  uuid
  brandId
  orderNumber
  orderDate
  totalPrice
  status
  statusI18n
  paymentStatus
  paymentStatusI18n
  shippingStatus
  shippingStatusI18n
}
    `;
export const OrganizationFragmentFragmentDoc = gql`
    fragment organizationFragment on Organization {
  id
  name
}
    `;
export const PaginationFragmentFragmentDoc = gql`
    fragment paginationFragment on Pagination {
  resultsCount
  totalCount
  totalPages
  currentPage
  currentCount
  nextPage
  previousPage
  hasNextPage
  hasPreviousPage
}
    `;
export const ProductFragmentFragmentDoc = gql`
    fragment productFragment on Product {
  id
  uuid
  status
  isResale
  isArchive
  colorId
}
    `;
export const ProductMasterFragmentFragmentDoc = gql`
    fragment productMasterFragment on ProductMaster {
  id
  uuid
  brandId
  name
  code
  description
  price
  priceTotal
  care
  sex
  sexI18n
  year
}
    `;
export const SellerFragmentFragmentDoc = gql`
    fragment sellerFragment on Seller {
  id
  name
}
    `;
export const SizeFragmentFragmentDoc = gql`
    fragment sizeFragment on Size {
  id
  name
}
    `;
export const UserFragmentFragmentDoc = gql`
    fragment userFragment on User {
  id
  email
  role
  firstName
  lastName
  confirmationToken
  fullName
  organizationId
}
    `;
export const ListingDocument = gql`
    query listing($brandId: ID!, $uuid: ID!) {
  listing(uuid: $uuid) {
    ...listingFragment
    product {
      ...productFragment
      productMaster {
        ...productMasterFragment
        sizes {
          ...sizeFragment
        }
        categories {
          ...categoryFragment
        }
      }
      color {
        ...colorFragment
      }
      images {
        ...imageFragment
      }
    }
    size {
      ...sizeFragment
    }
    images {
      ...imageFragment
    }
  }
  conditions(brandId: $brandId) {
    ...conditionFragment
  }
}
    ${ListingFragmentFragmentDoc}
${ProductFragmentFragmentDoc}
${ProductMasterFragmentFragmentDoc}
${SizeFragmentFragmentDoc}
${CategoryFragmentFragmentDoc}
${ColorFragmentFragmentDoc}
${ImageFragmentFragmentDoc}
${ConditionFragmentFragmentDoc}`;

/**
 * __useListingQuery__
 *
 * To run a query within a React component, call `useListingQuery` and pass it any options that fit your needs.
 * When your component renders, `useListingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListingQuery({
 *   variables: {
 *      brandId: // value for 'brandId'
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useListingQuery(baseOptions: Apollo.QueryHookOptions<ListingQuery, ListingQueryVariables> & ({ variables: ListingQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ListingQuery, ListingQueryVariables>(ListingDocument, options);
      }
export function useListingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ListingQuery, ListingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ListingQuery, ListingQueryVariables>(ListingDocument, options);
        }
export function useListingSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ListingQuery, ListingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ListingQuery, ListingQueryVariables>(ListingDocument, options);
        }
export type ListingQueryHookResult = ReturnType<typeof useListingQuery>;
export type ListingLazyQueryHookResult = ReturnType<typeof useListingLazyQuery>;
export type ListingSuspenseQueryHookResult = ReturnType<typeof useListingSuspenseQuery>;
export type ListingQueryResult = Apollo.QueryResult<ListingQuery, ListingQueryVariables>;
export const ListingsDocument = gql`
    query listings($brandId: ID!, $page: Int, $perPage: Int, $search: ListingSearch) {
  listings(brandId: $brandId, page: $page, perPage: $perPage, search: $search) {
    listings {
      ...listingFragment
      product {
        ...productFragment
        productMaster {
          ...productMasterFragment
          sizes {
            ...sizeFragment
          }
        }
        images {
          ...imageFragment
        }
        color {
          ...colorFragment
        }
        sizes {
          ...sizeFragment
        }
      }
    }
    pagination {
      ...paginationFragment
    }
  }
}
    ${ListingFragmentFragmentDoc}
${ProductFragmentFragmentDoc}
${ProductMasterFragmentFragmentDoc}
${SizeFragmentFragmentDoc}
${ImageFragmentFragmentDoc}
${ColorFragmentFragmentDoc}
${PaginationFragmentFragmentDoc}`;

/**
 * __useListingsQuery__
 *
 * To run a query within a React component, call `useListingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useListingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListingsQuery({
 *   variables: {
 *      brandId: // value for 'brandId'
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useListingsQuery(baseOptions: Apollo.QueryHookOptions<ListingsQuery, ListingsQueryVariables> & ({ variables: ListingsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ListingsQuery, ListingsQueryVariables>(ListingsDocument, options);
      }
export function useListingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ListingsQuery, ListingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ListingsQuery, ListingsQueryVariables>(ListingsDocument, options);
        }
export function useListingsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ListingsQuery, ListingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ListingsQuery, ListingsQueryVariables>(ListingsDocument, options);
        }
export type ListingsQueryHookResult = ReturnType<typeof useListingsQuery>;
export type ListingsLazyQueryHookResult = ReturnType<typeof useListingsLazyQuery>;
export type ListingsSuspenseQueryHookResult = ReturnType<typeof useListingsSuspenseQuery>;
export type ListingsQueryResult = Apollo.QueryResult<ListingsQuery, ListingsQueryVariables>;